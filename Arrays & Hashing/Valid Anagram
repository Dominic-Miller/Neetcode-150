/*There are a few ways to solve this problem:

1. We could create two HashMaps (one for each string) where the key is the character and the value will be the 
number of occurances that character has in the string. If the two strings are anagrams, the HashMaps will be equal.
The time complexity for this solution will be O(n) and the space complexity will also be O(n). n = s + t.

2. If we sort the two strings in alphabetical order and they equal one another, then they will be anagrams.
This solution would be a bit slower with a time complexity of O(n) and space complexity O(1) which is better since
we would not have to create HashMaps.*/

class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.length() != t.length()) { //if lengths not equal, cannot be anagram
            return false;
        }

        unordered_map<char, int> ms, mt; //create 2 unordered_maps with key char and value int
        for (int i = 0; i < s.length(); i++) { //iterate through the length of the string
            ms[s[i]]++; //add the character to the map
            mt[t[i]]++;
        }

        for (auto c : s) { //iterate through the string
            if (ms[c] != mt[c]) { //if character not equal, not anagram
                return false;
            }
        }

        return true;
    }
};
